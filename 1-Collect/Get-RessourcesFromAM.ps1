<#.SYNOPSIS
    Parses Azure Migrate assessment data from an Excel file and extracts virtual machine and disk SKUs.
.DESCRIPTION
    This script retrieves and processes Azure resource data from the output file generated by Azure Migrate, specifically focusing on virtual machine and disk SKUs.
    It outputs the results in the same structured JSON format as Get-AzureServices.ps1, which can then be used for finding appropriate Azure regions where these resources can be deployed.
.PARAMETER FilePath
    The path to the Excel file containing the Azure Migrate assessment data.

.PARAMETER OutputFile
    The name of the output file where the results will be exported. Default is "resources.json".

.EXAMPLE
    PS C:\> .\Get-RessourcesFromAM.ps1 -FilePath "C:\path\to\Assessment.xlsx" -OutputFile "C:\path\to\summary.json"
    Runs the script with the specified Excel file and outputs the results to the specified JSON file.

.OUTPUTS
    JSON file containing the queried resource data and extracted properties.

.NOTES
    - Requires Azure PowerShell module to be installed and authenticated.
    - Requires ImportExcel module to be installed for reading Excel files.
    - The script assumes the Excel file has specific worksheets named 'All_Assessed_Machines' and 'All_Assessed_Disks'.

#>

param(
    [Parameter(Mandatory=$true)] [string]$FilePath,
    [Parameter(Mandatory = $false)] [string] $OutputFile = ".\summary.json" # Json file to export the results to
)

# Check if the file exists  
if (-Not (Test-Path -Path $FilePath)) {
    Write-Host "File not found: $FilePath"
    exit
}
# Ensure the ImportExcel module is installed
if (-Not (Get-Module -ListAvailable -Name ImportExcel)) {
    Write-Host "ImportExcel module is not installed. Please install it using 'Install-Module ImportExcel'."
    exit
}
# Ensure the ImportExcel module is loaded
if (-Not (Get-Module -Name ImportExcel)) {
    Write-Host "Loading ImportExcel module..."
    Import-Module ImportExcel
}
# Check if the ImportExcel module is loaded
if (-Not (Get-Module -Name ImportExcel)) {
    Write-Host "Failed to load ImportExcel module."
    exit
}

# Start counting individual VM SKUs
# Check if the worksheet 'All_Assessed_Machines' exists in the Excel file
$worksheetExists = $false
try {
    $worksheets = Get-ExcelSheetInfo -Path $FilePath
    $worksheetExists = $worksheets | Where-Object { $_.Name -eq 'All_Assessed_Machines' }
} catch {
    Write-Host "Error accessing the Excel file: $_"
    exit
}
if (-Not $worksheetExists) {
    Write-Host "Worksheet 'All_Assessed_Machines' not found in the Excel file."
    exit
}
# If the worksheet exists, proceed with importing data
# Import the Excel file
$Data = Import-Excel -Path $FilePath -WorksheetName 'All_Assessed_Machines' | Group-Object 'Recommended Size' | Sort-Object -Property Count -Descending

# Initialize an empty array for VM SKUs
$VMskus = @()

# Loop through each group and display the recommended VM sizes
foreach ($Group in $Data) {
    Write-Host "Recommended Size: $($Group.Name) - Count: $($Group.Count)" -ForegroundColor Cyan
    # Add to output object
    $VMskus += @{
        vmSize  = $Group.Name
  }
}

# Start counting individual Disk SKUs
# Check if the worksheet 'All_Assessed_Disks' exists in the Excel file
$worksheetExists = $false   
try {
    $worksheets = Get-ExcelSheetInfo -Path $FilePath
    $worksheetExists = $worksheets | Where-Object { $_.Name -eq 'All_Assessed_Disks' }
} catch {
    Write-Host "Error accessing the Excel file: $_"
    exit
}   
if (-Not $worksheetExists) {
    Write-Host "Worksheet 'All_Assessed_Disks' not found in the Excel file."
    exit
}
# If the worksheet exists, proceed with importing data
# Import the Excel file
$Data = Import-Excel -Path $FilePath -WorksheetName 'All_Assessed_Disks' | Group-Object 'Recommended disk size SKU' | Sort-Object -Property Count -Descending

# Initialize an empty array for ResourceSkus
$diskSkus = @()

# Add to output object
foreach ($Group in $Data) {
    Write-Host "Recommended Disk Size SKU: $($Group.Name) - Count: $($Group.Count)" -ForegroundColor Cyan
    $diskSkus += @{
        name = if ($Group.Name -like "PremiumV2*") { "PremiumV2_LRS" } else { 
                    if ($Group.Name -like "Premium*") { "Premium_LRS" } else { 
                        if ($Group.Name -like "StandardSSD*") { "StandardSSD_LRS" } else { 
                            if ($Group.Name -like "Standard*") { "Standard_LRS" } else {
                                if ($Group.Name -like "Ultra*") { "UltraSSD_LRS" } else { "Unknown" } } } } }
            tier = $Group.Name -replace "Premium|Standard|Ultra", "" # Extract size from SKU name
 
    }
}

    
# Build the final object
$output = @(
    @{
        ResourceCount = $diskSkus.Count
        ResourceType = "microsoft.compute/disks"
        ResourceSkus = $diskSkus
        AzureRegions = @("dummyregion") # Replace with actual region if needed
    },
    @{
        ResourceCount = $VMskus.Count
        ResourceType = "microsoft.compute/virtualmachines"
        ResourceSkus = $VMskus
        AzureRegions = @("dummyregion") # Replace with actual region if needed
    }
)

# Convert the output to JSON format
$jsonOutput = $output | ConvertTo-Json -Depth 10
# Save the JSON output to a file
$outputFile = ".\ResourceSkus.json"
$jsonOutput | Out-File -FilePath $OutputFile -Encoding utf8
Write-Host "JSON output saved to $OutputFile" -ForegroundColor Green
